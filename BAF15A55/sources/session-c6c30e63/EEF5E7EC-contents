#' Assign Tree Numbers to Plots with Multiple PSP Instances
#'
#' @description
#' Ensures consistent tree numbering in cases where the same Permanent Sample Plot (PSP) location appears multiple times across years.
#' This helps in tracking individual trees over time and prevents confusion caused by duplicated or missing IDs.
#'
#' @param Trees A `data.table` of tree observations containing PSP identifiers and measurement years.
#'
#' @return A `data.table` with updated and harmonized tree numbers across PSP entries.
#'
#' @export
#'
#' @import data.table
#' @importFrom dplyr group_by mutate ungroup
#' @importFrom magrittr %>%
#'
#  Identifies cases where a single treenum within a Plot is associated with more than one PSP, which indicates inconsistent or incorrect data entry.
#  Defines the treenum_to_multiplePSP() function that takes as input a data frame or tibble called Trees.
treenum_to_multiplePSP <- function(Trees) {
  incorrect_trees <- Trees %>%
    group_by(Plot, treenum) %>%               # roups the data by unique tree identifiers within plots.
    filter(n_distinct(PSP) > 1) %>%           # Keeps only those groups where the same tree appears under more than one PSP.
    ungroup()                                 # Returns to a non-grouped data frame for the next operations.

  # Determines the correct PSP and Latin_full (species name) for each problematic tree based on frequency.
    correct_psp <- incorrect_trees %>%
    group_by(Plot, treenum, PSP, Latin_full) %>%            # Groups again by Plot, treenum, PSP, and Latin_full to count how many times each combination occurs.
    summarise(count = n(), .groups = "drop") %>%            # Tallies the number of times each combination appears.
    arrange(desc(count)) %>%                                # Sorts rows so most frequent entries come first.
    group_by(Plot, treenum) %>%
    slice_max(count, with_ties = FALSE) %>%                 # Picks the most frequent combination (in case of ties, chooses only one).
    ungroup() %>%
    distinct(Plot, treenum, PSP, Latin_full)                # Keeps only the relevant columns, ensuring one corrected PSP/species per tree.

 #Applies the corrections to the original data.
    trees_corrected <- Trees %>%
    left_join(correct_psp, by = c("Plot", "treenum")) %>%            # Merges the correction table (correct_psp) with the original dataset on Plot and treenum.
    mutate(PSP = coalesce(PSP.y, PSP.x),                             # Chooses the corrected values (PSP.y, Latin_full.y) if available; otherwise, keeps the original (PSP.x, Latin_full.x).
           Latin_full = coalesce(Latin_full.y, Latin_full.x)) %>%
    select(-PSP.x, -PSP.y, -Latin_full.x, -Latin_full.y)             # Removes the temporary columns (.x and .y) created during the join.

  return(list(incorrect_trees = incorrect_trees,                     # Rows with trees that had multiple PSPs (the problem).
              correct_psp = correct_psp,                             # The most likely correct PSP and species per tree (the fix).
              PSP_TREE_YIMO_corrected = trees_corrected))            # The final cleaned dataset, ready for analysis.
}







