#' Classify tree status
#'
#' @description
#' This function assigns a status to each tree record based on its observation history across measurement years.
#' It identifies whether a tree is a new regeneration, was lost (due to mortality or removal), or persisted throughout the observation period.
#'
#' @param Trees A `data.table` of individual tree measurements within Permanent Sample Plots (PSPs).
#'
#' @return A list or `data.table` categorizing each tree as "Regeneration", "Mortality", or "Alive".
#'
#' @export
#'
#' @importFrom data.table data.table
#' @importFrom dplyr filter mutate group_by summarise left_join ungroup case_when
#' @importFrom magrittr %>%
#'
# Defines a function named classify_tree_status() that takes a single argument Trees, which is a data frame containing repeated tree measurements (e.g., PSP data).
classify_tree_status <- function(Trees) {
  measyr_interval_per_plot <- Trees %>%                    # Determine plot-level measurement interval, that defines the total monitoring duration for each plot.
    group_by(Plot) %>%
    summarise(first_plot_year = min(MeasYr, na.rm = TRUE), # Finds the earliest and latest measurement years.
              last_plot_year = max(MeasYr, na.rm = TRUE))

  measyr_interval_per_treenum <- Trees %>%                          # Determine tree-level measurement interval, that shows the observation window for each individual tree.
    group_by(Plot, treenum) %>%
    summarise(first_tree_year = min(MeasYr, na.rm = TRUE),          # Finds the first and last years the tree was measured.
              last_tree_year = max(MeasYr, na.rm = TRUE)) %>%
    ungroup()

  #  Join plot-level data with tree-level data
  measyr_interval_per_treenum <- measyr_interval_per_treenum %>%
    left_join(measyr_interval_per_plot, by = "Plot")               # Adds the plot-level start and end years to each tree's record for comparison.

  # Add the joined year info to the main dataset
  Trees <- Trees %>%
    left_join(measyr_interval_per_treenum, by = c("Plot", "treenum"))   # Integrates tree-level and plot-level back into the original Trees dataset, preparing it for classification.

  #  Classify tree status
  Trees <- Trees %>%
    mutate(status = case_when(           # Uses case_when() to define the status of each tree record
      MeasYr == first_tree_year & first_tree_year > first_plot_year ~ "Regeneration", # the tree appears after the start of monitoring (not present initially).
      MeasYr == last_tree_year & last_tree_year < last_plot_year ~ "Last Measurement", # the tree was not measured again in the last year of the plot, indicating possible death or removal.
      MeasYr > first_tree_year & MeasYr < last_tree_year ~ "Consistent",  # the tree appears between its first and last recorded years.
      TRUE ~ "Survival"   # a default label for all other conditions, mostly trees present across the full duration.
    ))

  # Create status-based subsets
  # Divides the classified dataset into three categories for later analysis or visualization:
  Regen <- Trees %>% filter(status == "Regeneration")   # Regenerating trees.
  Last_Measurement <- Trees %>% filter(status == "Last Measurement")    # Trees last seen before final plot year.
  Alive <- Trees %>% filter(status %in% c("Consistent", "Survival"))   # Trees with consistent or full-survival presence.

  # Writes the full Trees dataset with the newly classified status column to a CSV file
  write.csv(Trees, "Status of trees due to be Alive, Last Measurement and Regeneration", row.names = FALSE)

 #  Returns a list of datasets:Full tree data with status and Subsets by classification.
  return(list(Trees = Trees, Regen = Regen, Last_Measurement = Last_Measurement, Alive = Alive))
}









